Okay, this is an excellent point to consolidate everything. Here is a detailed accounting of the UI/UX decisions, behaviors, and design considerations we've discussed, effectively forming a UX Design Document for the FFX Interactive Speedrun Guide.

---

**UX Design Document: FFX Interactive Speedrun Guide**

**1. Introduction & Goals**

*   **1.1. Project Goal:** To create a highly interactive, user-friendly web application for a Final Fantasy X speedrun guide, using validated, structured JSON data as its source.
*   **1.2. Design Philosophy:** The UI/UX aims to minimize runner distraction during a speedrun, provide clear and immediately relevant information, automate state tracking where logical, and allow for easy manual correction of game state. The design should be clean, readable, and efficient.
*   **1.3. Data Source:** The application will render content based on JSON files conforming to a predefined `types.ts` schema.

**2. Overall Application Architecture & Layout**

*   **2.1. Main Components:**
    *   **Table of Contents (ToC):** For navigation between guide chapters.
    *   **Main Content Area:** Displays the interactive guide steps and information.
    *   **Tracker Area:** Shows current game state (resources, flags) and allows manual edits.
*   **2.2. Desktop Layout:**
    *   **Global Header:**
        *   Contains: Application Title (e.g., "FFX Any% Interactive Guide").
        *   **Settings Icon (e.g., gear/cog):** On click, opens a small dropdown or modal for Global Settings (see 2.4).
    *   **Left Panel: Table of Contents (ToC):**
        *   Position: Fixed to the left side.
        *   Width: Fixed (e.g., 200-300px).
        *   Scrolling: Independently scrollable if the chapter list exceeds panel height.
        *   Content: Lists all `Chapter` titles. The introduction and acknowledgements may also be listed here if treated as chapters.
        *   Behavior: Clicking a chapter title scrolls the Main Content Area to the start of that chapter. The currently viewed/active chapter is highlighted in the ToC.
    *   **Central Panel: Main Content Area:**
        *   Position: Central, taking available width between ToC and Tracker.
        *   Scrolling: Primary scrollable area for all guide content blocks. Viewport-driven state changes operate on elements within this area.
    *   **Right Panel: Tracker Area:**
        *   Position: Fixed to the right side.
        *   Width: Fixed (e.g., 250-350px).
        *   **Initial State: Collapsed.** Only displays a summary of key `TrackedResource`s (e.g., Power Spheres, Speed Spheres, Grenades).
        *   **Expansion:** A clear "Expand" button/icon allows users to view all tracked resources and all `AcquiredItemFlag`s.
        *   **Scrolling (Expanded):** If the expanded list of items is long, only the list itself scrolls within the Tracker panel; its header/summary and expand/collapse button remain fixed.
        *   Behavior: Dynamically updates based on application state. Items are clickable for manual editing.
*   **2.3. Mobile/Responsive Layout:**
    *   **Fixed Mobile Header:** Contains Application Title, Menu Icon (for ToC), Tracker Icon, and Settings Icon.
    *   **ToC & Tracker Area:** Become collapsible drawers/panels, sliding in from the left (ToC) and right (Tracker) or expanding downwards, toggled by their respective icons in the header. Tracker on mobile may also default to its summary view when opened, with an internal expand option.
    *   **Main Content Area:** Takes up full screen width when ToC/Tracker are hidden.
*   **2.4. Global Settings (Accessed via Header Icon):**
    *   **CSR Mode Toggle:** Switches between "Standard" and "CSR Active" modes, affecting content visibility.
    *   **Theme Toggle:** Switches between "Light Theme" and "Dark Theme."
    *   **Text Size Adjustment:** Allows users to increase/decrease base font size for readability.

**3. Core Interaction Principles & Mechanics**

*   **3.1. Viewport-Driven State Changes ("Implicit Resolution"):**
    *   **Mechanism:** Utilizes the browser's Intersection Observer API.
    *   **Trigger Elements:** Specific rendered elements associated with `auto_guaranteed` `TrackedResourceUpdates` or automatically set `AcquiredItemFlags`.
    *   **"Apply on Scroll-Past" Behavior:** When a trigger element scrolls out of the viewport (upwards, indicating the user has progressed past it), the associated state change (resource update, flag set) is automatically applied to the application's state.
    *   **"Undo on Scroll-Back" Behavior:** If the user scrolls back up and a previously "applied" trigger element re-enters the viewport, the specific state change it caused is automatically reverted.
    *   **Goal:** To keep the application state synchronized with the user's progress through the guide with minimal manual input for predictable changes.
*   **3.2. User Prompts (General Principles):**
    *   **Clarity:** Prompts must be unambiguous, using text from `promptText` or `description` fields.
    *   **Conciseness:** Minimize user cognitive load.
    *   **Direct Association:** UI for prompts should be visually close to the instruction that requires them.
    *   **Immediate Feedback:** Changes made via prompts should reflect immediately in the Tracker Area.
*   **3.3. Persistent State:**
    *   **Mechanism:** Browser `localStorage`.
    *   **Scope:** Saves current chapter/approximate scroll position, all Tracker values (resources and flags), and global settings (CSR mode, theme preference, text size).
    *   **Goal:** Allow users to close and resume their session without losing progress or configuration.

**4. Styling & Theming**

*   **4.1. Overall Aesthetic:** "Clean Style" â€“ modern, highly readable, uncluttered, with clear information hierarchy, drawing inspiration from the provided PDF guide's clarity.
*   **4.2. Fonts:**
    *   **Default:** A highly readable, clean sans-serif font stack (e.g., Inter, Open Sans, or System UI fonts).
    *   **Optional "Final Fantasy" Font:** A user-selectable option, provided a suitable, readable, and legally usable webfont can be sourced.
*   **4.3. Color Palette:**
    *   **Character Names & Commands:** Use predefined, distinct hex codes for each main character (Tidus, Yuna, Auron, Wakka, Lulu, Rikku, Kimahri), enemies, and potentially Aeons. These are applied if not specified in the JSON `color` field or as a fallback.
    *   **Block Headers:** Each major block type (`BattleBlock`, `SphereGridBlock`, etc.) will have a distinct background color for its header bar to provide quick visual identification. These colors need light/dark theme variants.
    *   **Game Macros (SD, CS, FMV, etc.):** Styled for emphasis (e.g., bold black, or a consistent subtle accent color).
    *   **`TextParagraphBlock` with `displayHint: "emphasizedBlock"`:** Prominent styling (large, bold, centered text), potentially with a distinct color (e.g., warning red).
*   **4.4. Light Theme (Default):** Light background (white/off-white), dark primary text. Header colors will be chosen for good contrast.
*   **4.5. Dark Theme:** Dark background (dark grey/near-black), light primary text. All colors, especially for block headers and text, must ensure high contrast ratios for readability.
*   **4.6. Spacing & Layout:** Generous margins and padding for readability. Clear indentation for nested lists and conditional content.

**5. Detailed UI/UX for JSON Block Types**

*   **5.1. `InstructionListBlock` (`type: "instructionList"`)**
    *   **Visuals:** Renders as an HTML `<ol>` (if `ordered: true`) or `<ul>` (if `ordered: false`). No special block-level background.
    *   **Numbering (`ordered: true`):**
        *   Resets to 1 at the start of each new `Chapter`.
        *   If `resume: true`, numbering continues from the last item of the previous `InstructionListBlock` *at the same nesting level within the same parent scope*. Requires a scoped counter system.
    *   **CSR Behavior (`ListItemElement.csrBehavior`):**
        *   `ListItemElement`s are shown/hidden based on the global CSR mode and their `csrBehavior` value (`"standard_only"`, `"csr_only"`, `"always_relevant"`).
        *   `ListItemElement.csrNote` is **not** displayed to the end-user; it's for author reference.
    *   **Content:** `ListItemElement.content` is rendered, including any nested blocks or inline elements.

*   **5.2. `BattleBlock` (`type: "battle"`)**
    *   **Visuals:**
        *   **Header Bar:** Displays `enemyName` and `hp`. Uses a distinct background color (e.g., shades of red/purple for bosses).
    *   **Strategy (`strategy: (ListItemElement | ConditionalBlock)[]`):**
        *   Rendered as a primary bulleted list.
        *   Nested `ConditionalBlock`s: `conditionText` styled distinctly (e.g., indented, italicized), only active/true branch content shown if state-driven. Textual/choice conditionals show all options.
    *   **Resource/Flag Prompts:**
        *   For `TrackedResourceUpdates` (`user_confirm_rng_gain`, etc.) or `ItemAcquisitionFlags` (`user_checkbox_on_pickup_or_drop`, etc.) tied to specific list items: Prompts (buttons, steppers, toggle switches) appear directly associated with that list item.
        *   If prompts are defined at the block level (less common): Appear in a "User-Confirmable Section" at the end of the block.
    *   **Automatic Gains Info:** A small, non-interactive text line can indicate `auto_guaranteed` resource updates before any user prompts.
    *   **`notes` field:** Not displayed to the end-user.

*   **5.3. `ShopBlock` (`type: "shop"`)**
    *   **Visuals:**
        *   **Header Bar:** Displays "SHOP - {gilInfo}". Distinct background color (e.g., green/gold).
    *   **Sections (`sections: ShopSection[]`):**
        *   Each `ShopSection.title` ("Sell," "Buy," "Note") rendered as a prominent sub-header.
        *   Items under each section rendered as a bulleted list.
        *   `ConditionalBlock` as an item: Only rendered if its condition is true (for state-driven). If false, the item is not shown.
        *   Inline conditional text within a `ListItemElement` is displayed as part of the item text.
    *   **Interactivity:** Gil is not tracked by the app. Prompts for item purchases that affect tracked resources/flags appear with the relevant list item.

*   **5.4. `SphereGridBlock` (`type: "sphereGrid"`) & `SphereGridCharacterActions`**
    *   **Visuals (Main Block):**
        *   **Header Bar:** "SPHERE GRID". Distinct background color (e.g., teal/blue). `contextInfo` is not displayed.
    *   **Visuals (`SphereGridCharacterActions`):**
        *   **Layout:** Two-column per character: one for `associatedImage`, one for text instructions.
        *   **Character Sub-Header:** Displays `character` name, `slvlInfo`, and any `inlineCondition` for the character's entire section.
        *   **Image (`associatedImage`):** Sized based on JSON `width` props. Subtle scale-up on hover. Click opens a full-screen zoom/pan modal.
        *   **Actions List (`actions: (ListItemElement | ConditionalBlock)[]`):** Ordered bulleted list in the text column. Nested conditionals handled as standard.
    *   **Resource Updates (`consumption_implicit_grid`):** Automatic deduction from tracker when the relevant instruction/section scrolls out of view (viewport logic). No explicit user click needed for sphere consumption.
    *   **Top-Level Conditionals:** If a `SphereGridBlock.content` contains a `ConditionalBlock` determining which character grids to show (e.g., Mt. Gagazet Return Sphere paths), only the content of the active/true branch is rendered.

*   **5.5. `EncountersBlock` (`type: "encounters"`)**
    *   **Visuals:**
        *   **Header Bar:** "ENCOUNTERS". Distinct background color (e.g., orange/yellow).
    *   **Content (`content: (ListItemElement | ConditionalBlock)[]`):**
        *   Bulleted list of strategies for specific enemies or general advice. Enemy names styled for emphasis.
        *   Conditional strategies handled as standard.
    *   **Resource/Flag Prompts:** For steals, RNG drops, etc., prompts appear with the relevant `ListItemElement`.
    *   **`notes` field:** Not displayed to the end-user.

*   **5.6. `TrialBlock` (`type: "trial"`)**
    *   **Visuals:**
        *   **Header Bar:** "CLOISTER OF TRIALS". Distinct background color (e.g., indigo/purple).
    *   **Steps (`steps: ListItemElement[]`):** Rendered as an ordered (numbered) list.
    *   **Resource/Flag Prompts:** If any, appear at the end or with the relevant step.

*   **5.7. `BlitzballGameBlock` (`type: "blitzballGame"`)**
    *   **Visuals:**
        *   **Header Bar:** "BLITZBALL". Distinct background color (e.g., aqua/bright blue).
    *   **Strategy (`strategy: ListItemElement[]`):**
        *   Bulleted list, with clear hierarchy for halves, conditions (e.g., "If Luca wins Blitzoff..."), and actions. Sub-headers like "First Half" styled distinctly.
    *   **Outcome Flag (`BlitzballGameWon_Luca`):** This flag is critical. The prompt to set it (win/loss confirmation) appears via a subsequent `ListItemElement` containing an `AcquiredItemFlag` prompt, not within the `BlitzballGameBlock` itself based on current `types.ts`. Default strategy shown for pending Blitzball outcome is "Win Content" with a note.

*   **5.8. `EquipBlock` (`type: "equip"`)**
    *   **Visuals:**
        *   **Header Bar:** "EQUIPMENT". Distinct background color (e.g., grey/brown).
    *   **Content (`content: (ListItemElement | ConditionalBlock)[]`):**
        *   Bulleted list of equipment changes.
        *   Conditional equipment choices handled as standard (state-driven only shows active branch).

*   **5.9. `ImageBlock` (Standalone `ChapterContent`)**
    *   **Visuals:** Image displayed inline with other chapter content. No special block header.
    *   **Sizing:** Based on JSON `width` properties.
    *   **Interactivity:** Subtle scale-up on hover. Click opens a full-screen zoom/pan modal.
    *   **Accessibility:** Alt text to be considered (e.g., derived from path or a new field).

*   **5.10. `TextParagraphBlock` (`type: "textParagraph"`)**
    *   **Visuals:** Renders as a standard `<p>` tag.
    *   **Content:** Renders all `InlineElement`s within its `content` array according to their types and styling.
    *   **`displayHint: "emphasizedBlock"`:** If present, applies prominent styling (large, bold, centered, potentially colored text) for high-emphasis messages.

*   **5.11. `ConditionalBlock` (Top-Level `ChapterContent`)**
    *   **Visuals:** No explicit "CONDITIONAL" header. It acts as a content router.
    *   **State-Driven (`blitzballdetermination`, `acquired_item_flag_check`, etc.):** Only the content of the active/true branch is rendered. User sees a seamless flow.
    *   **Textual/Choice-Driven (`textual_direct_choice`, `textual_block_options`):** All `ConditionalOption` branches are rendered sequentially, each preceded by its `conditionText` styled as a sub-header. The user reads all options and manually decides their path.

**6. Detailed UI/UX for Inline Elements & Common Components**

*   **6.1. `InlineElement` Rendering:**
    *   `PlainTextElement`: Plain text.
    *   `FormattedText`: Applies `isBold`, `isItalic`, `color`, `isLarge`, `textDecoration`.
    *   `CharacterReference`: Character name styled with predefined `color` and `isBold`.
    *   `CharacterCommand`: Character name and action text, styled; `subItems` rendered as nested list.
    *   `GameMacro`: Macro name (e.g., "SD," "CS") and `value`, styled for emphasis (e.g., bold).
    *   `FormationElement`: List of `CharacterReference`s.
    *   `LinkElement`: Standard hyperlink.
    *   `NthElement`, `NumberElement`, `MathSymbolElement`: Respective text/symbol.
*   **6.2. Tracker Area (Detailed Interaction):**
    *   **Display:** Key resources in collapsed view; all resources and flags in expanded view. Flags display their boolean state (e.g., "Yes/No," "True/False," or a visual toggle state).
    *   **Editing:**
        *   Clicking a resource opens an inline input/stepper to modify its quantity.
        *   Clicking a flag toggles its state (for boolean flags) or presents choices (if flag has multiple states derived from a choice).
*   **6.3. User Prompts (Detailed Behavior):**
    *   **Boolean/Flag Prompts (`AcquiredItemFlag`):**
        *   Uses **Toggle Switches** for yes/no.
        *   Uses **Sets of Buttons** for mutually exclusive choices (e.g., Biran & Yenke drops).
    *   **Resource Quantity Prompts (`TrackedResource` with `user_confirm_...`):**
        *   `Label: {TrackedResource.description}`
        *   `Amount per action: [ {JSON_quantity} ] (+/- Stepper Buttons)` (User can modify this value).
        *   `[Add to Tracker]` / `[Apply Consumption]` Button: Applies the current "Amount per action" to the main tracker. Does *not* disable the prompt, allowing multiple applications from the same prompt.
        *   `Total for this prompt: +{total_accumulated_here}`: Live feedback text showing cumulative change made *via this specific prompt instance*.

**7. Conclusion**

This document outlines the comprehensive UI/UX design for the FFX Interactive Speedrun Guide. These decisions aim to create a functional, intuitive, and efficient tool for speedrunners. All features discussed are intended for the initial release.

---

This detailed breakdown should serve as a strong reference for the development phase. Let me know if this captures everything to your satisfaction!